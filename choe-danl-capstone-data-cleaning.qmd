---
title: Determinants of Financial Literacy at SUNY Geneseo
subtitle: ""
author: 
  - Alexis Kruzicki
  - Isabella Nicastro
  - Byeong-Hak Choe (Advisor)
institute: 
  - Accounting and Data Analytics
  - Finance and Data Analytics
  - Data Analytics and Economics
date: last-modified
categories: [financial-literacy, data-cleaning, machine-learning, data-visualization, r, quarto]

execute: 
  warning: false
  message: false
  
toc: true
---
```{r}
#| include: false

library(knitr)
library(rmarkdown)
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)
library(stargazer)
library(margins)

theme_set(theme_ipsum()+
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x  = element_text(angle = 0,
                                            size = rel(1.5),
                                            margin = margin(10,0,0,0)),
                axis.title.y  = element_text(angle = 0,
                                            size = rel(1.5),
                                            margin = margin(0,10,0,0))
                )
          )
```



## Preparation of Data

```{r}
#| warning: false
#| message: false

df <- read_csv("survey-raw.csv")

var_desc <- colnames(df)
colnames(df) <- c("time_stamp",
                  "email",
                  "score",
                  "grad_yr",
                  "county",
                  "year_geneseo",
                  "transfer",
                  "major",
                  "minor",
                  "prof_program",
                  "graduate_degree",
                  "self_eval",
                  "age_first_job",
                  "file_tax",
                  "college_fund",
                  "parent_job",
                  "credit_card",
                  "age_credit_card",
                  "pay_rent",
                  "own_house",
                  "car_payment",
                  "brokerage_acct",
                  "fnce_course_b4",
                  "fnce_course_geneseo",
                  "q1_inflation",
                  "q2_mortgage_int",
                  "q3_401k",
                  "q4_risk_return",
                  "q5_comp_int",
                  "q6_apr",
                  "q7_trap",
                  "gold")


major_cat <- read_csv('major_category.csv')
minor_cat <- read_csv('minor_category.csv')

major_1_cat <- major_cat |> 
  select(ends_with('1')) |> 
  distinct() |> 
  rename(dept_major_1 = dept_1)
major_2_cat <- major_cat |> 
  select(ends_with('2')) |> 
  distinct() |> 
  rename(dept_major_2 = dept_2)

minor_1_cat <- minor_cat |> 
  select(ends_with('1')) |> 
  distinct() |> 
  rename(dept_minor_1 = dept_1)
minor_2_cat <- minor_cat |> 
  select(ends_with('2')) |> 
  distinct() |> 
  rename(dept_minor_2 = dept_2)


df_clean <- df |> 
  filter(is.na(q7_trap) | q7_trap == "To prepare for unexpected expenses") |> 
  mutate(score = as.integer(str_sub(score, 1, 1))) |> 
  mutate(year_geneseo = case_when(str_detect(year_geneseo, "First") ~ "First",
                                  str_detect(year_geneseo, "Second") ~ "Second",
                                  str_detect(year_geneseo, "Third") ~ "Third",
                                  str_detect(year_geneseo, "Fourth") ~ "Fourth",
                                  str_detect(year_geneseo, "Grad") ~ "Grad",
                                  str_detect(year_geneseo, "Prefer") ~ NA,
                                  )) |> 
  mutate(age_first_job_raw = age_first_job, .after = age_first_job) |> 
  mutate(age_first_job = case_when(str_detect(age_first_job, "15") ~ "15",
                                  str_detect(age_first_job, "16") ~ "16",
                                  str_detect(age_first_job, "17") ~ "17",
                                  str_detect(age_first_job, "18") ~ "18",
                                  str_detect(age_first_job, "19") ~ "19",
                                  str_detect(age_first_job, "20") ~ "20",
                                  str_detect(age_first_job, "Prefer") ~ NA,
                                  )
         ) |> 
  mutate(file_tax = case_when(str_detect(file_tax, "Done") ~ "Yes",
                                  str_detect(file_tax, "I did not") ~ "No",
                                  str_detect(file_tax, "My parents") ~ "Parents",
                                  str_detect(file_tax, "My accountant") ~ "Parents",
                                  str_detect(file_tax, "My family") ~ "Parents",
                                  str_detect(file_tax, "Yes") ~ "Yes",
                                  str_detect(file_tax, "No") ~ "No",
                                  str_detect(file_tax, "Prefer") ~ NA,
                                  )) |> 
  select(-(time_stamp:email)) |> 
  select(-q7_trap) |> 
  mutate(id_respondent = row_number(), .before = 1) |>
  mutate(year_geneseo = ifelse(!is.na(graduate_degree), 
                               "Grad", year_geneseo) ) |> 
  mutate(year_upper_lower = ifelse(year_geneseo == 'First' | 
                                     year_geneseo == 'Second',
                                   'Underclassmen', 
                                   ifelse(year_geneseo == "Grad",
                                          'Graduates', 'Upperclassmen')),
         .after = year_geneseo
         ) |> 
  # Alexis
  mutate(credit_card = case_when(str_detect(credit_card, "I use my parent's credit card") ~ "Parents",
                                  str_detect(credit_card, "Yes") ~ "Yes",
                                  str_detect(credit_card, "No") ~ "No",
                                  str_detect(credit_card, "Prefer") ~ NA,
                                  )) |>
  mutate(age_credit_card = case_when(str_detect(age_credit_card, "Before age 18") ~ "b_18",
                                  str_detect(age_credit_card, "At or after age 18") ~ "a_18",
                                  str_detect(age_credit_card, " 
I never owned a credit card") ~ "Never",
                                  str_detect(age_credit_card, "Prefer") ~ NA
                                  )) |> 
  mutate(pay_rent = case_when(str_detect(pay_rent, "Live on campus") ~ "On_Campus",
                                  str_detect(pay_rent, "Yes") ~ "Yes",
                                  str_detect(pay_rent, "No") ~ "No",
                                  str_detect(pay_rent, "Prefer") ~ NA,
                                  ))|>
  mutate(own_house = case_when(str_detect(own_house, "Yes") ~ "Yes",
                                  str_detect(own_house, "No") ~ "No",
                                  str_detect(own_house, "Prefer") ~ NA,
                                  ))|>
  mutate(car_payment = case_when(str_detect(car_payment, "Yes") ~ "Yes",
                                  str_detect(car_payment, "No") ~ "No",
                                  str_detect(car_payment, "Prefer") ~ NA,
                                  )) |> 
  mutate(score_pf = ifelse(score >= 4, 1, 0), .after = score) |> 
  relocate(self_eval, .after = score_pf) |> 
  mutate(score_scaled = scale(score), .after = score_pf) |> 
  mutate(self_eval_scaled = scale(self_eval), .after = self_eval) |> 
  mutate(over_confidence = self_eval_scaled - score_scaled, .after = score_pf) |> 
  mutate(MSA = case_when(  # https://dol.ny.gov/new-york-state-geography
    str_detect(county, paste(c("Albany", "Rensselaer", "Saratoga", "Schenectady", "Schoharie"), collapse = '|') ) ~ "Albany-Schenectady-Troy",
    str_detect(county, paste(c("Broome", "Tioga"), collapse = '|') ) ~ "Binghamton",
    str_detect(county, paste(c("Erie", "Niagara"), collapse = '|') ) ~ "Buffalo-Niagara Falls",
    str_detect(county, paste(c("Chemung"), collapse = '|') ) ~ "Elmira",
    str_detect(county, paste(c("Warren", "Washington"), collapse = '|') ) ~ "Glens Falls",
    str_detect(county, paste(c("Tompkins"), collapse = '|') ) ~ "Ithaca",
    str_detect(county, paste(c("Kingston"), collapse = '|') ) ~ "Ulster",
    str_detect(county, paste(c("Bronx", "Kings", "New York", "Queens", "Richmond"), collapse = '|') ) ~ "New York City Metropolitan Area",
    str_detect(county, paste(c("Orange", "Rockland", "Westchester"), collapse = '|') ) ~ "Orange-Rockland-Westchester",
    str_detect(county, paste(c("Livingston", "Monroe", "Ontario", "Orleans", "Wayne", "Yates"), collapse = '|') ) ~ "Rochester",
    str_detect(county, paste(c("Madison", "Onondaga", "Oswego"), collapse = '|') ) ~ "Syracuse",
    str_detect(county, paste(c("Herkimer", "Oneida"), collapse = '|') ) ~ "Utica-Rome",
    str_detect(county, paste(c("Jefferson"), collapse = '|') ) ~ "Watertown-Fort Drum",
    str_detect(county, paste(c("Dutchess", "Putnam"), collapse = '|') ) ~ "Dutchess-Putnam",
    str_detect(county, paste(c("Nassau", "Suffolk"), collapse = '|') ) ~ "Nassau-Suffolk",
    str_detect(county, paste(c("high school"), collapse = '|') ) ~ "Outside NY",
    str_detect(county, paste(c("Allegany", "Cattaraugus", "Cayuga", "Chautauqua",
                               "Chenango", "Clinton", "Columbia", "Cortland",
                               "Delaware", "Essex", "Franklin", "Fulton",
                               "Genesee", "Greene", "Hamilton", "Lewis",
                               "Montgomery", "Otsego", "Saint Lawrence", "Schuyler",
                               "Seneca", "Steuben", "Sullivan", "Wyoming"), collapse = '|') ) ~ "Non-MSA",
    ), .after = county
    ) |> 
  mutate(college_fund = case_when(
    college_fund == "No" ~ "No",
    college_fund == "Parents Pay for college tuition" ~ "Yes",
    college_fund == "Prefer to not respond" ~ "Prefer to not respond",
    college_fund == "They set up a savings account with my own money" ~ "Yes",
    college_fund == "Yes" ~ "Yes",
    college_fund == "Yes, but got used for a car instead" ~ "Yes",
    college_fund == "military/educational benefits" ~ "Yes",
    college_fund == "not sure" ~ "Prefer to not respond"
  )) |> 
  mutate(prof_program_TF = ifelse(is.na(prof_program),
                                  0, 1), .after = prof_program) |> 
  mutate(parent_job_TF = case_when(
    parent_job == "Accounting" ~ 1,
    parent_job == "Insurance" ~ 1,
    parent_job == "No" ~ 0,
    parent_job == "One parent used to work for a bank for 17+ years" ~ 1,
    parent_job == "Prefer to not respond" ~ NA,
    parent_job == "Yes" ~ 0,
    parent_job == "healthcare and Law" ~ 0,
    parent_job == "mom is partly involved in real estate" ~ 1,
    parent_job == "mom used to" ~ 1,
    parent_job == "my dad is a mortgage broker" ~ 1,
  ), .after = parent_job) |> 
  mutate(age_18_card = ifelse(age_credit_card == 'a_18',
                              1, 
                              ifelse(age_credit_card == 'b_18',
                                     0, NA)),
         .after = age_credit_card) |> 
  mutate(own_house = ifelse(own_house == "No", 0, 1)) |> 
  mutate(car_payment = ifelse(car_payment == 'No',
                              0, 
                              ifelse(car_payment == 'Yes',
                                     1, NA)),
         fnce_course_b4 = ifelse(fnce_course_b4 == 'No',
                              0, 
                              ifelse(fnce_course_b4 == 'Yes',
                                     1, NA)),
         fnce_course_geneseo = ifelse(fnce_course_geneseo == 'No',
                               "0", 
                               ifelse(fnce_course_geneseo == 'Yes, only one course',
                                     "1", 
                                     ifelse(fnce_course_geneseo == 'Yes, more than one course', "More_than_1", NA))),
         ) |> 
  mutate(brokerage_acct = ifelse(brokerage_acct == "I am using a financial advisor to invest my savings, unsure of the status of that", "No", brokerage_acct),
         brokerage_acct = ifelse(str_detect(brokerage_acct, "I never set any of this up"), "No", brokerage_acct),
         brokerage_acct = ifelse(str_detect(brokerage_acct, "Teacher's Retirement"), "No", brokerage_acct),
         brokerage_acct = ifelse(str_detect(brokerage_acct, "No, however am currently in process of doing so"), "No", brokerage_acct),
         q_IRA = ifelse(str_detect(brokerage_acct, "IRA"), 1, 0),
         q_stock = ifelse(str_detect(brokerage_acct, "stock"), 1, 0),
         q_CDs = ifelse(str_detect(brokerage_acct, "CDs"), 1, 0),
         q_brockerage = ifelse(str_detect(brokerage_acct, "brockerage"), 1, 0),
         q_bonds = ifelse(str_detect(brokerage_acct, "bonds"), 1, 0),
         q_options = ifelse(str_detect(brokerage_acct, "options"), 1, 0),
         q_crypto = ifelse(str_detect(brokerage_acct, "crypto"), 1, 0),
         q_yes = ifelse(brokerage_acct == "No", 0, 
                        ifelse(brokerage_acct == "Prefer to not respond", NA, 1)),
         .before = brokerage_acct
         ) |> 
  separate(major, into = c('major_1', 'major_2'),
           sep = ', ') |> 
  separate(minor, into = c('minor_1', 'minor_2'),
           sep = ', ') |> 
  relocate(grad_yr, .before = year_geneseo) |> 
  relocate(major_1, major_2, .after = year_upper_lower) |> 
  relocate(minor_1, minor_2, .after = major_2) 

df_clean <- df_clean |> 
  left_join(major_1_cat) |>
  left_join(major_2_cat) |> 
  left_join(minor_1_cat) |> 
  left_join(minor_2_cat |> filter(!is.na(minor_2))) |> 
  mutate(minor_2 = ifelse(minor_1 == "anthropology and biology",
                          "Biology", minor_2),
         minor_2 = ifelse(minor_1 == "sustainability studies and biology",
                          "Biology", minor_2)
         ) |>
  relocate(dept_major_1, .after = major_1) |>
  relocate(dept_major_2, .after = major_2) |>
  relocate(dept_minor_1, .after = minor_1) |>
  relocate(dept_minor_2, .after = minor_2) |> 
  mutate(transfer = ifelse(transfer == "Yes", 1, 0)) |> 
  select(-age_first_job_raw, -parent_job, -age_credit_card,
         -brokerage_acct) |> 
  mutate(q1_inflation = ifelse(q1_inflation == "The same amount as today", 1, 0),
         q2_mortgage_int = ifelse(q2_mortgage_int == "TRUE", 1, 0),
         q3_401k = ifelse(str_detect(q3_401k, "Either before"), 1, 0),
         q4_risk_return = ifelse(q4_risk_return == "TRUE", 1, 0),
         q5_comp_int = ifelse(q5_comp_int == "More than $102", 1, 0),
         q6_apr = ifelse(str_detect(q6_apr, "It is calculated by multiplying"), 1, 0),
         age_first_job = as.integer(age_first_job),
         college_fund = ifelse(college_fund == "Yes", 1,
                               ifelse(college_fund == "No", 0 , NA)),
         age_18_card = ifelse(is.na(age_18_card), 0 , age_18_card)
         ) |> 
  mutate(major = "", .after = year_upper_lower) |> 
  mutate(
         major = ifelse(dept_major_1 == "Education" | dept_major_2 == "Education",
                        "Education", major),

         major = ifelse(dept_major_1 == "School of Business" | dept_major_2 == "School of Business", "School of Business", major)
  ) |> 
  filter(grad_yr != "Received a GED") |> 
  mutate(major = ifelse( dept_major_1 %in% c("Biology", 
                                             "Mathematics",
                                             "Geology", 
                                             "Chemistry", 
                                             "Neuroscience", 
                                             "Geography",
                                             "Physics",
                                             "Geography and Sustainability Studies"), 
                         "STEM", major),
         major = ifelse( dept_major_2 %in% c("Biology", 
                                             "Mathematics",
                                             "Geology", 
                                             "Chemistry", 
                                             "Neuroscience", 
                                             "Geography",
                                             "Physics",
                                             "Geography and Sustainability Studies"), 
                         "STEM", major))

df_clean <- df_clean |> 
  mutate(major = ifelse(is.na(major) & dept_major_1 == "Education", "Education", major),
         major = ifelse(is.na(major) & dept_major_2 == "Education", "Education", major),)


df_clean <- df_clean |> 
  mutate(major = ifelse(is.na(major), "Non-STEM", major),
         major = ifelse(major == "", "Non-STEM", major)
         )

major_1_count <- df_clean |> 
  count(dept_major_1) |> 
  arrange(-n)

major_2_count <- df_clean |> 
  count(dept_major_2) |> 
  arrange(-n)
```


```{r}
df_clean_sum <- skim(df_clean) |> 
  arrange(-n_missing)
```


```{r}
#| warning: false
df_clean |> 
  mutate(grad_yr = factor(grad_yr, 
                           levels = c("Prior to 2018", "2018", "2019", "2020", "2021", "2022", "2023"))) |> 
  mutate(score_pf = ifelse(score_pf == 1, "Pass", "Fail")) |> 
  filter(!is.na(grad_yr))|> 
  ggplot(aes(fill = score_pf, y= grad_yr)) +
  geom_bar(position = "fill") +
  theme(legend.position = "top")+
   scale_fill_manual(values = c("#9bbbae", "#065535"))+
  guides(fill = guide_legend(reverse = T)) +
  labs(title = "Graduation Year Pass Rate", 
       x = "Percentage Pass", 
       y = "High School\n Graduation Year",
       fill = "Financial Literacy Quiz")
```



# Alexis' Data Viz


# Isabella's Data Viz


# Byeong-Hak's ML

```{r}
df_clean_ML <- df_clean |> 
  select(-id_respondent, 
         -score, -score_scaled, 
         -self_eval, -self_eval_scaled,
         -county, -year_geneseo,
         -major_1, -major_2, -minor_1, -minor_2,
         -starts_with("dept_"), 
         -q1_inflation, -q2_mortgage_int, -q3_401k,
         -q4_risk_return, -q5_comp_int, -q6_apr,
         -prof_program, -graduate_degree,
         ) |> 
  drop_na()

df_clean_ML2 <- df_clean |> 
  select(-id_respondent, 
         -score_pf, -score_scaled, 
         -self_eval, -self_eval_scaled,
         -county, -year_geneseo,
         -major_1, -major_2, -minor_1, -minor_2,
         -starts_with("dept_"), 
         -q1_inflation, -q2_mortgage_int, -q3_401k,
         -q4_risk_return, -q5_comp_int, -q6_apr,
         -prof_program, -graduate_degree,
         ) |> 
  drop_na()

df_clean_ML_sum <- skim(df_clean_ML) |> 
  arrange(-n_missing)

dept_fnce <- df_clean_ML |> 
  group_by(fnce_course_geneseo, major) |> 
  count() |> 
  arrange(fnce_course_geneseo, n)

reg <- lm(data = df_clean_ML,
          score_pf ~ .)
df_dummies <-  as.data.frame(model.matrix(reg))[, -1]
df_dummies <- cbind(df_clean_ML$score_pf ,df_dummies)
df_ML <- df_dummies |> 
  rename(score_pf = `df_clean_ML$score_pf`)


df_dummies_cor <- cor(df_dummies) |> 
  as.data.frame()


reg <- lm(data = df_clean_ML2,
          score ~ .)
df_dummies <-  as.data.frame(model.matrix(reg))[, -1]
df_dummies <- cbind(df_clean_ML2$score ,df_dummies)
df_ML2 <- df_dummies |> 
  rename(score = `df_clean_ML2$score`)



```


```{r}

colnames(df_ML) <- str_replace_all(colnames(df_ML), " ", "_")
colnames(df_ML) <- str_replace_all(colnames(df_ML), "-", "_")

colnames(df_ML2) <- str_replace_all(colnames(df_ML2), " ", "_")
colnames(df_ML2) <- str_replace_all(colnames(df_ML2), "-", "_")

model <- glm(score_pf ~ ., 
             data = df_ML, 
             family = binomial(link = "logit") )


model_lm <- lm(score ~ ., 
               data = df_ML2)

summary(model_lm)
```




```{r}
library(margins)
m <- margins(model)
ame_result <- summary(m)
ame_result
```

## Regression Table

```{r}
#| results: asis

stargazer(model, model_lm, type = 'html',
          omit = c("MSA", "grad_", "pay_",
                   "college_fund"))

```

## Logit AME

```{r ame-logit}
#| fig-height: 7

ggplot(data = ame_result |> 
         filter( p <= .1)) +
  geom_point( aes(y = reorder(factor, AME), x = AME) ) +
  geom_errorbar(aes(y = reorder(factor, AME), 
                    xmin = lower, xmax = upper),
                width = .5) +
  geom_vline(xintercept = 0, color = 'red', linetype = 2) +
  labs(y = "",
       title = "Logistic Regression Estimation",
       subtitle = "Average Marginal Effect on Financial Literacy Scores") +
  scale_x_continuous(breaks = seq(-1,.4,.2),
                     labels = scales::percent) +
  theme(plot.title = element_text(hjust = .5),
        plot.subtitle = element_text(hjust = .5))
```
## Linear Regression AME

```{r beta-linear}
#| fig-height: 7
broom::tidy(model_lm, conf.int = T) |> 
  filter(p.value <= .1) |> 
  filter(!str_detect(term, "MSA")) |> 
  ggplot() +
  geom_point( aes(y = reorder(term, estimate), x = estimate)) +
  geom_errorbar(aes(y = reorder(term, estimate), 
                    xmin = conf.low, xmax = conf.high),
                width = .5,) +
  geom_vline(xintercept = 0, color = 'red', linetype = 2) +
  labs(y = "",
       x = "Beta Estimate",
       title = "Linear Regression Estimation",
       subtitle = "Effect on Financial Literacy Scores")  +
  theme(plot.title = element_text(hjust = .5),
        plot.subtitle = element_text(hjust = .5),
        )
```



```{r}
df_clean |> 
  count(credit_card)
```


```{r}
df_ML |> 
  ggplot(aes(x = over_confidence,
             fill = factor(score_pf))) +
  geom_density(alpha = .25) + 
  facet_grid(q_yes ~ .)
```

```{r}
df_ML |> 
  ggplot(aes(x = over_confidence,
             fill = factor(score_pf))) +
  geom_density(alpha = .25) +
  facet_wrap(prof_program_TF ~.)
```


## Classficiation Tree


```{r}
df_clean |> 
  ggplot(aes(x = over_confidence, y = major)) +
  geom_boxplot() 
```


```{r tree-classification}
library(rpart)
library(rpart.plot)

rf <- rpart(score_pf ~ .,
            data = df_ML, method  = "class")
rf
printcp(rf)
rpart.plot(rf)
# title("Classification Tree", cex.sub = .2)

```

## Regression Tree
```{r tree-regression}

rf_reg <- rpart(score ~ .,
            data = df_ML2, method  = "anova")
rf_reg
printcp(rf_reg)
rpart.plot(rf_reg)
title("Regression Tree")

```


## Random Forest - Variable Importance
```{r vip}

library(ranger)
library(vip)
fao_ranger1 <- ranger(score ~ ., 
                        data = df_ML2, 
                        mtry = 13, num.trees = 50,
                        importance = "impurity")

vip1 <- vip(fao_ranger1)

df1 <- data.frame(
    var = vip1[["data"]][["Variable"]],
    imp = vip1[["data"]][["Importance"]]
  ) %>% 
    arrange(var)


df1 |> 
  ggplot(aes(x = imp, y = reorder(var, imp),
             fill = reorder(var, imp))) +
  geom_col(show.legend = F) +
  scale_x_log10() +
  labs(x = "Variable Importance",
       y = "",
       title = "Random Forest Estimation",
       subtitle = "Varialbe Importance") +
  scale_fill_manual(values = c("#E5F5E0" ,
  "#CCE1CA" ,
  "#B2CEB4" ,
  "#99BA9E" ,
  "#7FA688" ,
  "#669373" ,
  "#4C7F5D",
  "#336B47",
  "#195831" ,
  "#00441B")) +
  theme(plot.title = element_text(hjust = .5),
        plot.subtitle = element_text(hjust = .5))


```




